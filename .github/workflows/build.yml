name: Build and Test Application

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Cancel previous runs on the same branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-linux:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        compiler: [g++]
        build_type: [Debug, Release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Show Ubuntu version
      run: |
        echo "=== Ubuntu Version Information ==="
        lsb_release -a
        echo "Kernel version:"
        uname -r
        echo "Architecture:"
        uname -m
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cppcheck tree
    
    - name: Verify compiler installation
      run: |
        ${{ matrix.compiler }} --version
        make --version
    
    - name: Show project structure
      run: |
        make structure
    
    - name: Build application (Debug)
      if: matrix.build_type == 'Debug'
      run: |
        make debug CXX=${{ matrix.compiler }}
    
    - name: Build application (Release)
      if: matrix.build_type == 'Release'
      run: |
        make CXX=${{ matrix.compiler }}
    
    - name: Run unit tests and application test
      run: |
        make test CXX=${{ matrix.compiler }}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: calculator-${{ matrix.compiler }}-${{ matrix.build_type }}
        path: |
          calculator
          test_runner
        retention-days: 7

  build-multiple-os:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-22.04]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Show Ubuntu version
      run: |
        echo "=== Ubuntu Version Information ==="
        lsb_release -a
        echo "Kernel version:"
        uname -r
        echo "Architecture:"
        uname -m
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
    
    - name: Build and test
      run: |
        make
        make test
    
    - name: Clean build
      run: make clean

  # Static analysis job
  static-analysis:
    runs-on: ubuntu-latest
    needs: build-linux
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install static analysis tools
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-tidy
    
    - name: Run static analysis
      run: |
        make analyze
    
    - name: Check code formatting
      run: |
        # Install clang-format if not available
        sudo apt-get install -y clang-format
        make format-check || (echo "Code formatting issues found. Run 'make format' to fix." && exit 1)

  # Integration tests - depends on successful builds
  integration-tests:
    runs-on: ubuntu-latest
    needs: [build-linux]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential valgrind
    
    - name: Build for testing
      run: make debug
    
    - name: Run memory leak tests
      run: |
        echo "Running memory leak detection..."
        valgrind --leak-check=full --error-exitcode=1 ./calculator
        echo "Memory tests completed"
    
    - name: Run extended integration tests
      run: |
        echo "Running extended test suite..."
        # Add more comprehensive integration tests here
        make test
        echo "Integration tests completed"

  performance-test:
    runs-on: ubuntu-latest
    needs: [build-linux]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Show Ubuntu version
      run: |
        echo "=== Ubuntu Version Information ==="
        lsb_release -a
        echo "Kernel version:"
        uname -r
        echo "Architecture:"
        uname -m
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential time
    
    - name: Build optimized version
      run: |
        make CXXFLAGS="-std=c++17 -Wall -Wextra -O3 -DNDEBUG -Iinclude"
    
    - name: Run performance test
      run: |
        echo "Running performance test..."
        time ./calculator
        echo "Performance test completed"
